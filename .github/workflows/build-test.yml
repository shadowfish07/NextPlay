name: Build Test

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - debug
          - release
      output_format:
        description: 'Output format'
        required: true
        default: 'apk'
        type: choice
        options:
          - apk
          - aab
          - both

env:
  FLUTTER_VERSION: "3.35.1"
  JAVA_VERSION: "17"

jobs:
  build:
    name: Build Signed APK/AAB
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Setup Android signing
        if: github.event.inputs.build_type == 'release'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # 创建签名配置
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release-key.jks
          
          # 创建 key.properties 文件（使用相对路径）
          cat > key.properties << EOF
          storeFile=release-key.jks
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
          
          echo "✅ Android signing configured"
          echo "📁 Keystore file location:"
          ls -la android/app/release-key.jks
          echo "📄 Key properties:"
          cat key.properties

      - name: Build APK
        if: github.event.inputs.output_format == 'apk' || github.event.inputs.output_format == 'both'
        run: |
          echo "🔨 Building APK..."
          flutter build apk --${{ github.event.inputs.build_type }}
          echo "✅ APK build completed"

      - name: Build App Bundle
        if: github.event.inputs.output_format == 'aab' || github.event.inputs.output_format == 'both'
        run: |
          echo "🔨 Building App Bundle..."
          flutter build appbundle --${{ github.event.inputs.build_type }}
          echo "✅ App Bundle build completed"

      - name: Prepare artifacts
        run: |
          mkdir -p build-output
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          # 复制 APK
          if [[ -f "build/app/outputs/flutter-apk/app-${{ github.event.inputs.build_type }}.apk" ]]; then
            cp "build/app/outputs/flutter-apk/app-${{ github.event.inputs.build_type }}.apk" \
               "build-output/nextplay-${{ github.event.inputs.build_type }}-${TIMESTAMP}.apk"
            echo "✅ APK copied to artifacts"
          fi
          
          # 复制 AAB
          if [[ -f "build/app/outputs/bundle/${{ github.event.inputs.build_type }}/app-${{ github.event.inputs.build_type }}.aab" ]]; then
            cp "build/app/outputs/bundle/${{ github.event.inputs.build_type }}/app-${{ github.event.inputs.build_type }}.aab" \
               "build-output/nextplay-${{ github.event.inputs.build_type }}-${TIMESTAMP}.aab"
            echo "✅ AAB copied to artifacts"
          fi
          
          # 生成构建信息
          cat > build-output/build-info.txt << EOF
          Build Type: ${{ github.event.inputs.build_type }}
          Output Format: ${{ github.event.inputs.output_format }}
          Build Time: $(date)
          Git Commit: ${{ github.sha }}
          Flutter Version: ${{ env.FLUTTER_VERSION }}
          Java Version: ${{ env.JAVA_VERSION }}
          EOF
          
          # 生成校验和
          cd build-output
          if ls *.apk *.aab 1> /dev/null 2>&1; then
            sha256sum *.apk *.aab 2>/dev/null > checksums.txt || true
          fi
          
          echo "📁 Build artifacts:"
          ls -la

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextplay-build-${{ github.event.inputs.build_type }}-${{ github.run_number }}
          path: build-output/
          retention-days: 7

      - name: Clean up signing files
        if: always()
        run: |
          rm -f android/app/release-key.jks
          rm -f key.properties
          echo "🧹 Cleanup completed"

      - name: Build summary
        run: |
          echo "🎉 Build completed successfully!"
          echo "Build Type: ${{ github.event.inputs.build_type }}"
          echo "Output Format: ${{ github.event.inputs.output_format }}"
          echo "Artifacts uploaded as: nextplay-build-${{ github.event.inputs.build_type }}-${{ github.run_number }}"