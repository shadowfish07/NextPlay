name: Deploy Release

permissions:
  contents: write

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.35.1"
  JAVA_VERSION: "17"
  NODE_VERSION: "20"

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        run: |
          npm ci
          flutter pub get

      - name: Generate code
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      - name: Check for release
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Dry run to check if semantic-release will create a release
          npm run semantic-release -- --dry-run > semantic-output.txt 2>&1 || true

          if grep -q "Published release" semantic-output.txt || grep -q "The next release version is" semantic-output.txt; then
            echo "has-release=true" >> $GITHUB_OUTPUT
            echo "✅ New release will be created"
          else
            echo "has-release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No release needed - no significant changes"
          fi

          echo "=== Semantic Release Dry Run Output ==="
          cat semantic-output.txt

      - name: Setup Android signing
        if: steps.check-release.outputs.has-release == 'true'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release-key.jks
          cat > key.properties << EOF
          storeFile=release-key.jks
          storePassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          keyPassword=$KEY_PASSWORD
          EOF
          echo "✅ Android signing configured"

      - name: Build signed APK
        if: steps.check-release.outputs.has-release == 'true'
        run: flutter build apk --release

      - name: Build signed App Bundle
        if: steps.check-release.outputs.has-release == 'true'
        run: flutter build appbundle --release

      - name: Prepare release files
        if: steps.check-release.outputs.has-release == 'true'
        run: |
          mkdir -p release-files
           
          # Copy build outputs to release-files directory
          cp build/app/outputs/flutter-apk/app-release.apk release-files/
          cp build/app/outputs/bundle/release/app-release.aab release-files/

          # Generate checksums
          cd release-files
          sha256sum *.apk *.aab > checksums.txt

          echo "📦 Release files prepared:"
          ls -la

      - name: Run semantic-release
        if: steps.check-release.outputs.has-release == 'true'
        run: npm run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        if: always()
        run: |
          rm -f android/app/release-key.jks
          rm -f key.properties

      - name: Summary
        run: |
          if [[ "${{ steps.check-release.outputs.has-release }}" == "true" ]]; then
            echo "🎉 Release deployed successfully!"
            echo "📱 Check the GitHub Releases page for download links"
          else
            echo "ℹ️ No release created - no significant changes detected"
            echo "💡 Make sure your commits follow Conventional Commits format:"
            echo "   - feat: new feature (minor version)"
            echo "   - fix: bug fix (patch version)"
            echo "   - feat!: breaking change (major version)"
          fi
