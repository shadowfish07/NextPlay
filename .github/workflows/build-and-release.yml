name: Build and Release

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  FLUTTER_VERSION: "3.35.1"
  JAVA_VERSION: "17"
  NODE_VERSION: "20"

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: flutter analyze

      # - name: Run tests
      #   run: flutter test

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            .dart_tool
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pubspec.lock', '**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Calculate version
        id: version
        run: |
          # 获取当前最新的标签版本
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # 提取版本号（去掉v前缀）
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"

          # 计算构建号（基于提交数）
          BUILD_NUMBER=$(git rev-list --count HEAD)
          echo "Build number: $BUILD_NUMBER"

          # 如果是手动触发，使用指定的版本类型
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # 自动判断版本类型（基于提交信息）
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ $COMMIT_MSG =~ ^feat(\(.+\))?!: ]] || [[ $COMMIT_MSG =~ BREAKING.CHANGE ]]; then
              RELEASE_TYPE="major"
            elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi

          echo "Release type: $RELEASE_TYPE"

          # 计算新版本号
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          case $RELEASE_TYPE in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Update version in pubspec.yaml
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_NUMBER="${{ steps.version.outputs.build-number }}"

          # 更新 pubspec.yaml 中的版本
          sed -i "s/^version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml

          echo "Updated pubspec.yaml version to: $VERSION+$BUILD_NUMBER"

      - name: Setup Android signing
        run: |
          # 创建签名配置
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/release-key.jks

          # 创建 key.properties 文件
          cat > key.properties << EOF
          storeFile=android/app/release-key.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

          echo "Android signing configured"

      - name: Build signed APK
        run: |
          flutter build apk --release \
            --build-name="${{ steps.version.outputs.version }}" \
            --build-number="${{ steps.version.outputs.build-number }}"

      - name: Build signed App Bundle
        run: |
          flutter build appbundle --release \
            --build-name="${{ steps.version.outputs.version }}" \
            --build-number="${{ steps.version.outputs.build-number }}"

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          VERSION="${{ steps.version.outputs.version }}"

          # 复制构建产物
          cp build/app/outputs/flutter-apk/app-release.apk "release-artifacts/nextplay-v${VERSION}.apk"
          cp build/app/outputs/bundle/release/app-release.aab "release-artifacts/nextplay-v${VERSION}.aab"

          # 生成校验和
          cd release-artifacts
          sha256sum *.apk *.aab > checksums.txt

          echo "Release artifacts prepared:"
          ls -la

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{ steps.version.outputs.version }}
          path: release-artifacts/
          retention-days: 30

      - name: Clean up signing files
        if: always()
        run: |
          rm -f android/app/release-key.jks
          rm -f key.properties

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release-${{ needs.build-android.outputs.version }}
          path: release-artifacts/

      - name: Create git tag
        run: |
          VERSION="v${{ needs.build-android.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 检查标签是否已存在
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists, skipping tag creation"
          else
            git tag -a "$VERSION" -m "Release $VERSION"
            git push origin "$VERSION"
            echo "Created and pushed tag: $VERSION"
          fi

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="v${{ needs.build-android.outputs.version }}"

          # 获取上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # 生成发布说明
          cat > release-notes.md << EOF
          # NextPlay $VERSION

          ## 📱 下载

          - **APK (推荐)**: [nextplay-${{ needs.build-android.outputs.version }}.apk](https://github.com/${{ github.repository }}/releases/download/$VERSION/nextplay-v${{ needs.build-android.outputs.version }}.apk)
          - **AAB (Google Play)**: [nextplay-${{ needs.build-android.outputs.version }}.aab](https://github.com/${{ github.repository }}/releases/download/$VERSION/nextplay-v${{ needs.build-android.outputs.version }}.aab)

          ## 📋 更新内容

          EOF

          # 添加提交日志
          if [[ -n "$PREV_TAG" ]]; then
            echo "### 🔄 变更记录" >> release-notes.md
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> release-notes.md
          else
            echo "### 🎉 首个版本" >> release-notes.md
            echo "- 初始版本发布" >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "## 🔐 校验和" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          cat release-artifacts/checksums.txt >> release-notes.md
          echo "\`\`\`" >> release-notes.md

          # 输出发布说明内容
          cat release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-android.outputs.version }}
          name: NextPlay v${{ needs.build-android.outputs.version }}
          body_path: release-notes.md
          files: |
            release-artifacts/*.apk
            release-artifacts/*.aab
            release-artifacts/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [build-android, release]
    if: always() && (needs.build-android.result == 'success' || needs.build-android.result == 'failure')

    steps:
      - name: Send build notification
        run: |
          if [[ "${{ needs.build-android.result }}" == "success" ]]; then
            echo "✅ Build completed successfully for version ${{ needs.build-android.outputs.version }}"
            if [[ "${{ needs.release.result }}" == "success" ]]; then
              echo "🚀 Release v${{ needs.build-android.outputs.version }} has been published"
            fi
          else
            echo "❌ Build failed"
          fi
